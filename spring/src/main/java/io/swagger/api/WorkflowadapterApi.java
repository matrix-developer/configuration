/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.12-1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.AdapterResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-05-02T11:56:32.648Z")

@Api(value = "workflowadapter", description = "the workflowadapter API")
public interface WorkflowadapterApi {

    @ApiOperation(value = "createVnf", nickname = "createVnfUsingPOST", notes = "", response = AdapterResponse.class, tags={ "work-flow-adapter-controler", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AdapterResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/workflowadapter/createVnf",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AdapterResponse> createVnfUsingPOST(@NotNull @ApiParam(value = "UID", required = true) @Valid @RequestParam(value = "UID", required = true) String UID,@NotNull @ApiParam(value = "timeout", required = true) @Valid @RequestParam(value = "timeout", required = true) String timeout);


    @ApiOperation(value = "deleteVnf", nickname = "deleteVnfUsingPOST", notes = "", response = AdapterResponse.class, tags={ "work-flow-adapter-controler", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AdapterResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/workflowadapter/deleteVnf",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AdapterResponse> deleteVnfUsingPOST(@NotNull @ApiParam(value = "UID", required = true) @Valid @RequestParam(value = "UID", required = true) String UID,@NotNull @ApiParam(value = "timeout", required = true) @Valid @RequestParam(value = "timeout", required = true) String timeout);


    @ApiOperation(value = "executeCurrentJob", nickname = "executeCurrentJobUsingGET", notes = "", response = AdapterResponse.class, tags={ "work-flow-adapter-controler", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AdapterResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/workflowadapter/executecurrentjob",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<AdapterResponse> executeCurrentJobUsingGET(@NotNull @ApiParam(value = "UID", required = true) @Valid @RequestParam(value = "UID", required = true) String UID,@NotNull @ApiParam(value = "timeout", required = true) @Valid @RequestParam(value = "timeout", required = true) String timeout);


    @ApiOperation(value = "instantiateVnf", nickname = "instantiateVnfUsingPOST", notes = "", response = AdapterResponse.class, tags={ "work-flow-adapter-controler", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AdapterResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/workflowadapter/instantiateVnf",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AdapterResponse> instantiateVnfUsingPOST(@NotNull @ApiParam(value = "UID", required = true) @Valid @RequestParam(value = "UID", required = true) String UID,@NotNull @ApiParam(value = "timeout", required = true) @Valid @RequestParam(value = "timeout", required = true) String timeout);


    @ApiOperation(value = "terminateVnf", nickname = "terminateVnfUsingPOST", notes = "", response = AdapterResponse.class, tags={ "work-flow-adapter-controler", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AdapterResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/workflowadapter/terminateVnf",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AdapterResponse> terminateVnfUsingPOST(@NotNull @ApiParam(value = "UID", required = true) @Valid @RequestParam(value = "UID", required = true) String UID,@NotNull @ApiParam(value = "timeout", required = true) @Valid @RequestParam(value = "timeout", required = true) String timeout);


    @ApiOperation(value = "updateVnf", nickname = "updateVnfUsingPOST", notes = "", response = AdapterResponse.class, tags={ "work-flow-adapter-controler", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AdapterResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/workflowadapter/updateVnf",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AdapterResponse> updateVnfUsingPOST(@NotNull @ApiParam(value = "UID", required = true) @Valid @RequestParam(value = "UID", required = true) String UID,@NotNull @ApiParam(value = "timeout", required = true) @Valid @RequestParam(value = "timeout", required = true) String timeout);

}
